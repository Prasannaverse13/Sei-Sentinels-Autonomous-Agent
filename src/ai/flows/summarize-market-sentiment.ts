'use server';

/**
 * @fileOverview Summarizes the market sentiment and relevant news for a given portfolio.
 *
 * - summarizeMarketSentiment - A function that provides a summarized overview of the market sentiment.
 * - SummarizeMarketSentimentInput - The input type for the summarizeMarketSentiment function.
 * - SummarizeMarketSentimentOutput - The return type for the summarizeMarketSentiment function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SummarizeMarketSentimentInputSchema = z.object({
  portfolioOverview: z
    .string()
    .describe('Overview of the user portfolio, including assets and holdings.'),
  agentActivities: z
    .string()
    .describe('Recent activities of the agents managing the portfolio.'),
});
export type SummarizeMarketSentimentInput = z.infer<
  typeof SummarizeMarketSentimentInputSchema
>;

const SummarizeMarketSentimentOutputSchema = z.object({
  marketSentimentSummary: z
    .string()
    .describe(
      'A summarized overview of the current market sentiment and relevant news related to the portfolio.'
    ),
});
export type SummarizeMarketSentimentOutput = z.infer<
  typeof SummarizeMarketSentimentOutputSchema
>;

export async function summarizeMarketSentiment(
  input: SummarizeMarketSentimentInput
): Promise<SummarizeMarketSentimentOutput> {
  return summarizeMarketSentimentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'summarizeMarketSentimentPrompt',
  input: {schema: SummarizeMarketSentimentInputSchema},
  output: {schema: SummarizeMarketSentimentOutputSchema},
  prompt: `You are an AI assistant that summarizes market sentiment and relevant news for a given portfolio.

  Given the following portfolio overview and recent agent activities, provide a concise summary of the current market sentiment and any relevant news that might impact investment decisions.

  Portfolio Overview:
  {{portfolioOverview}}

  Agent Activities:
  {{agentActivities}}

  Summary:`, // Make sure the prompt ends with "Summary:" so that the last thing generated by the LLM is the summary.
});

const summarizeMarketSentimentFlow = ai.defineFlow(
  {
    name: 'summarizeMarketSentimentFlow',
    inputSchema: SummarizeMarketSentimentInputSchema,
    outputSchema: SummarizeMarketSentimentOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
